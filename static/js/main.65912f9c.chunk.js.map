{"version":3,"sources":["store/createStore.js","context/StoreContext.js","hooks/useStore.js","pages/List/index.js","pages/Received/index.js","components/Sidebar/index.js","App.js","serviceWorker.js","index.js"],"names":["createStore","list","Map","add","item","this","set","uuid","markReceived","id","get","isReceived","filter","StoreContext","createContext","StoreProvider","children","store","useLocalStore","Provider","value","useStore","useContext","Error","List","observer","rootStore","console","log","className","Received","Sidebar","to","activeClassName","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sTAEA,SAASA,IACP,MAAO,CACLC,KAAM,IAAIC,IACVC,IAFK,SAEDC,GACFC,KAAKJ,KAAKK,IAAIC,cAAQH,IAExBI,aALK,SAKQC,GACXJ,KAAKJ,KAAKS,IAAID,GAAIE,YAAa,GAEjC,eACE,OAAON,KAAKJ,KAAKW,QAAO,SAAAR,GAAI,OAAIA,EAAKO,gBCP3C,IAAME,EAAeC,0BAEfC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAQC,YAAclB,GAC5B,OAAO,kBAACa,EAAaM,SAAd,CAAuBC,MAAOH,GAAQD,ICGhCK,EARE,WACf,IAAMJ,EAAQK,qBAAWT,GACzB,IAAKI,EACH,MAAM,IAAIM,MAAM,iDAElB,OAAON,GCmBMO,G,MAVFC,aAAS,WACpB,IAAMC,EAAYL,IAElB,OADAM,QAAQC,IAAIF,GAEV,6BAASG,UAAU,QACjB,yCCXSC,G,MARE,WACf,OACE,6BAASD,UAAU,YACjB,2CCmBSE,G,MArBC,WACd,OACE,2BAAOF,UAAU,WACf,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASG,GAAG,QAAQC,gBAAgB,UAApC,SAIF,4BACE,kBAAC,IAAD,CAASD,GAAG,YAAYC,gBAAgB,UAAxC,kB,MC4BGC,MA3Bf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAS,+BACf,kBAAC,EAAD,MAEA,0BAAMN,UAAU,OACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUL,GAAG,WAEf,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,IAAD,CAAUL,GAAG,gBCvBPM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.65912f9c.chunk.js","sourcesContent":["import { v4 as uuid } from 'uuid'\n\nfunction createStore() {\n  return {\n    list: new Map(),\n    add(item) {\n      this.list.set(uuid(), item)\n    },\n    markReceived(id) {\n      this.list.get(id).isReceived = true\n    },\n    get received() {\n      return this.list.filter(item => item.isReceived)\n    },\n  }\n}\n\nexport { createStore }\n","import React, { createContext } from 'react'\nimport { useLocalStore } from 'mobx-react-lite'\n\nimport { createStore } from '../store/createStore'\n\nconst StoreContext = createContext()\n\nconst StoreProvider = ({ children }) => {\n  const store = useLocalStore(createStore)\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n}\n\nexport { StoreContext, StoreProvider }\n","import { useContext } from 'react'\n\nimport { StoreContext } from '../context/StoreContext'\n\nconst useStore = () => {\n  const store = useContext(StoreContext)\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider.')\n  }\n  return store\n}\n\nexport default useStore\n","import React from 'react'\nimport { observer } from 'mobx-react-lite'\n// import { v4 as uuid } from 'uuid'\n\nimport { useStore } from '../../hooks'\n\nimport './List.scss'\n\n// const defaultItem = {\n//   id: uuid(),\n//   name: 'iPhone 11',\n//   onlineStore: 'amazon',\n//   price: 26.56,\n//   currency: 'USD',\n//   deliveryDate: new Date('01/12/2020'),\n//   isReceived: false,\n// }\n\nconst List = observer(() => {\n  const rootStore = useStore()\n  console.log(rootStore)\n  return (\n    <section className=\"List\">\n      <h1>List</h1>\n    </section>\n  )\n})\n\nexport default List\n","import React from 'react'\n\nimport './Received.scss'\n\nconst Received = () => {\n  return (\n    <section className=\"Received\">\n      <h1>Received</h1>\n    </section>\n  )\n}\n\nexport default Received\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport './Sidebar.scss'\n\nconst Sidebar = () => {\n  return (\n    <aside className=\"Sidebar\">\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/list\" activeClassName=\"active\">\n              List\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/received\" activeClassName=\"active\">\n              Received\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </aside>\n  )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { StoreProvider } from './context/StoreContext'\n\nimport List from './pages/List'\nimport Received from './pages/Received'\n\nimport Sidebar from './components/Sidebar'\n\nimport './App.scss'\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <Router basename=\"/yotam-elkaslasy-23-09-2020\">\n        <Sidebar />\n\n        <main className=\"App\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Redirect to=\"/list\" />\n            </Route>\n            <Route exact path=\"/list\">\n              <List />\n            </Route>\n            <Route exact path=\"/received\">\n              <Received />\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/list\" />\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n    </StoreProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}