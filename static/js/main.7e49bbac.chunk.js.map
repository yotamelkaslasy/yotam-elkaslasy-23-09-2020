{"version":3,"sources":["constants.js","store/createStore.js","context/StoreContext.js","hooks/useStore.js","hooks/useInterval.js","components/Button/index.js","components/LoadingSpinner/index.js","components/FetchCurrencyError/index.js","components/AddItemModal/index.js","pages/List/index.js","pages/Received/index.js","components/Sidebar/index.js","App.js","serviceWorker.js","index.js"],"names":["STORES","amazon","ebay","createStore","data","fetchCurrencyLoading","fetchCurrencyError","fetchCurrencyErrorMessage","currency","list","Map","listSum","receivedSum","currencyInterval","defaultCurrencyInterval","saveItem","item","this","set","uuid","calcAggregatedListSum","store","Array","from","entries","filter","isReceived","onlineStore","reduce","accumulator","price","calcAggregatedReceivedSum","receivedItems","markReceived","id","get","onIntervalChange","interval","sort","itemA","itemB","dateUtils","Date","deliveryDate","fetchCurrency","fetch","then","res","status","statusText","Error","json","StoreContext","createContext","StoreProvider","children","useLocalStore","Provider","value","useStore","useContext","useInterval","callback","delay","runOnLoad","effectDependencies","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Button","primary","onClick","title","className","type","style","background","LoadingSpinner","isLoading","FetchCurrencyError","observer","rootStore","defaultItem","name","Object","keys","AddItemModal","visible","closeModalHandler","formRef","createRef","newItem","isFormValid","onValueChange","event","target","parseFloat","ref","htmlFor","onChange","required","map","key","placeholder","checkValidity","reportValidity","AddItemModalButton","onclick","List","isModalVisible","selectedTab","selectTab","tab","openModal","closeModal","isListRoute","useLocation","pathname","isItemsList","isStoresList","position","min","defaultValue","parseInt","size","top","left","transform","textAlign","index","display","rates","ILS","toFixed","Received","length","Sidebar","to","activeClassName","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mbAAaA,EAAS,CACpBC,OAAQ,EACRC,KAAM,GCGR,SAASC,IACP,MAAO,CACLC,KAAM,CACJC,sBAAsB,EACtBC,oBAAoB,EACpBC,0BAA2B,wBAC3BC,SAAU,KACVC,KAAM,IAAIC,IACVC,QAAS,CACPV,OAAQ,EACRC,KAAM,GAERU,YAAa,CACXX,OAAQ,EACRC,KAAM,IAGVW,iBAAkB,KAClBC,wBAAyB,IACzBC,SAlBK,SAkBIC,GACPC,KAAKb,KAAKK,KAAKS,IAAIC,cAAQH,IAG7BI,sBAtBK,SAsBiBC,GACpBJ,KAAKb,KAAKO,QAAQU,GAASC,MAAMC,KAAKN,KAAKb,KAAKK,KAAKe,WAClDC,QAAO,YACN,OADoB,oBACPC,cAEdD,QAAO,uCAAmBE,cAAgBN,KAC1CO,QAAO,SAACC,EAAD,GACN,OAAOA,EAD2B,oBACPC,QAC1B,IAEPC,0BAhCK,SAgCqBV,GACxBJ,KAAKb,KAAKQ,YAAYS,GAASJ,KAAKe,cACjCP,QAAO,uCAAmBE,cAAgBN,KAC1CO,QAAO,SAACC,EAAD,GACN,OAAOA,EAD2B,oBACPC,QAC1B,IAEPG,aAvCK,SAuCQC,GACXjB,KAAKb,KAAKK,KAAK0B,IAAID,GAAIR,YAAa,GAEtCU,iBA1CK,SA0CYC,GACfpB,KAAKJ,iBAAmBwB,GAE1B,oBACE,OAAOf,MAAMC,KAAKN,KAAKb,KAAKK,KAAKe,WAC9Bc,MAAK,cAA2B,IAAvBC,EAAsB,oBAAXC,EAAW,oBAC9B,OAAOC,IACL,IAAIC,KAAKH,EAAMI,cACf,IAAID,KAAKF,EAAMG,kBAGlBlB,QAAO,YACN,OADoB,oBACRC,eAGZkB,cAzDD,WAyDkB,IAAD,yHACpB,EAAKxC,KAAKC,sBAAuB,EADb,SAEOwC,MD3D/B,mEC2DuDC,MAAK,SAAAC,GACtD,GAAIA,EAAIC,QAAU,IAKhB,MAJA,EAAK5C,KAAKE,oBAAqB,EAC/B,EAAKF,KAAKC,sBAAuB,EACjC,EAAKE,0BACHwC,EAAIC,OAAS,IAAMD,EAAIE,YAAc,wBACjC,IAAIC,MAAM,0BAElB,OAAOH,EAAII,UAVO,OAEpB,EAAK/C,KAAKI,SAFU,OAYpB,EAAKJ,KAAKC,sBAAuB,EAZb,+CC1D1B,IAAM+C,EAAeC,0BAEfC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBlC,EAAQmC,YAAcrD,GAC5B,OAAO,kBAACiD,EAAaK,SAAd,CAAuBC,MAAOrC,GAAQkC,ICGhCI,EARE,WACf,IAAMtC,EAAQuC,qBAAWR,GACzB,IAAK/B,EACH,MAAM,IAAI6B,MAAM,iDAElB,OAAO7B,G,QCmBMwC,MA1Bf,SACEC,EACAC,GAGC,IAFDC,EAEA,wDADAC,EACA,uDADqB,GAEfC,EAAgBC,mBAEtBC,qBAAU,WACJJ,GACFF,MAFK,YAIFG,IAEPG,qBAAU,WACRF,EAAcG,QAAUP,IACvB,CAACA,IAEJM,qBAAU,WACR,GAAc,OAAVL,EAAgB,CAClB,IAAM7B,EAAKoC,aAAY,kBAAMJ,EAAcG,YAAWN,GACtD,OAAO,kBAAMQ,cAAcrC,OAHtB,CAKL6B,GALK,mBAKKE,MCTDO,G,MAZA,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,QAASC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,UAAiC,IAAtBC,YAAsB,MAAf,SAAe,EAC1E,OACE,4BACEA,KAAMA,EACND,UAAS,iBAAYA,GACrBF,QAASA,EACTI,MAAO,CAAEC,YAAaN,GAAW,SAChCE,KCEQK,G,MATQ,SAAC,GACtB,OADwC,EAAhBC,UAEtB,yBAAKL,UAAU,kBACb,8BACA,+BAEA,OCMSM,G,MATYC,aAAS,WAClC,IAAMC,EAAYzB,IAClB,OAAOyB,EAAUhF,KAAKE,mBACpB,yBAAKsE,UAAU,sBACZQ,EAAUhF,KAAKG,2BAEhB,S,QCJA8E,G,MAAc,CAClBC,KAAM,GACN3D,YAAa4D,OAAOC,KAAKxF,GAAQ,GACjC8B,MAAO,EACPa,aAAc,GACdjB,YAAY,IAGR+D,EAAeN,aAAS,YAAqC,IAAlCO,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,kBAClCC,EAAUC,sBAEVT,EAAYzB,IAEZtC,EAAQmC,aAAc,iBAAO,CACjCsC,QAAQ,eACHT,GAELU,aAAa,MAGTC,EAAgB,SAAAC,GACpB5E,EAAMyE,QAAQG,EAAMC,OAAOZ,MACH,UAAtBW,EAAMC,OAAOZ,KACTa,WAAWF,EAAMC,OAAOxC,OACxBuC,EAAMC,OAAOxC,OAOrB,OAAOgC,EACL,oCACE,yBAAKd,UAAU,wBAAwBF,QAASiB,IAChD,yBAAKf,UAAU,gBACb,yBAAKA,UAAU,uBAAf,YACA,yBAAKA,UAAU,6BAAf,0CAGA,0BAAMwB,IAAKR,EAAShB,UAAU,0BAC5B,yBAAKA,UAAU,oCACb,2BACEA,UAAU,yCACVyB,QAAQ,YAFV,aAKA,2BACEnE,GAAG,WACH2C,KAAK,OACLS,KAAK,OACL5B,MAAOrC,EAAMyE,QAAQR,KACrBgB,SAAUN,EACVpB,UAAU,yCACV2B,UAAQ,KAGZ,yBAAK3B,UAAU,oCACb,2BACEA,UAAU,yCACVyB,QAAQ,eAFV,kBAKA,4BACEnE,GAAG,cACHoD,KAAK,cACL5B,MAAOrC,EAAMyE,QAAQnE,YACrBiD,UAAU,0CACV0B,SAxCgB,SAAAL,GAC1B5E,EAAMyE,QAAQnE,YAAcsE,EAAMC,OAAOxC,QAwC9B6B,OAAO/D,QAAQxB,GAAQwG,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAX/C,EAAW,KAC5C,OACE,4BAAQ+C,IAAG,UAAKA,EAAL,YAAY/C,GAASA,MAAO+C,GACpCA,QAMX,yBAAK7B,UAAU,oCACb,2BACEA,UAAU,yCACVyB,QAAQ,SAFV,eAKA,2BACEnE,GAAG,QACH2C,KAAK,SACLS,KAAK,QACL5B,MAAOrC,EAAMyE,QAAQhE,MACrBwE,SAAUN,EACVU,YAAY,cACZ9B,UAAU,yCACV2B,UAAQ,KAGZ,yBAAK3B,UAAU,oCACb,2BACEA,UAAU,yCACVyB,QAAQ,gBAFV,sBAKA,2BACEnE,GAAG,eACH2C,KAAK,OACLS,KAAK,eACL5B,MAAOrC,EAAMyE,QAAQnD,aACrB2D,SAAUN,EACVU,YAAY,qBACZ9B,UAAU,yCACV2B,UAAQ,MAId,yBAAK3B,UAAU,6BACb,kBAAC,EAAD,CACEH,SAAO,EACPE,MAAM,OACNC,UAAU,wCACVF,QAAS,WACFkB,EAAQvB,QAAQsC,iBAIrBvB,EAAUrE,SAASM,EAAMyE,SACzBzE,EAAMyE,QAAN,eAAqBT,GACrBM,KALEC,EAAQvB,QAAQuC,oBAQtB,kBAAC,EAAD,CACEjC,MAAM,SACND,QAAS,WACPiB,UAMR,QAGAkB,EAAqB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAC5B,OADmD,EAAdpB,QAEnC,kBAAC,EAAD,CACEjB,SAAO,EACPE,MAAM,WACNC,UAAU,qBACVF,QAASoC,IAET,MCmCSC,G,MAjLF5B,aAAS,WACpB,IAAMC,EAAYzB,IAEZtC,EAAQmC,aAAc,iBAAO,CACjCwD,gBAAgB,EAChBC,YAAa,QACbC,UAHiC,SAGvBC,GACR9F,EAAM4F,YAAcE,GAEtBC,UANiC,WAO/B/F,EAAM2F,gBAAiB,GAEzBK,WATiC,WAU/BhG,EAAM2F,gBAAiB,OAI3BnD,GACE,WACEuB,EAAUxC,kBAEZwC,EAAUvE,kBAAoBuE,EAAUtE,yBACxC,EACA,CAACsE,EAAUvE,mBAGbuD,qBAAU,WACRgB,EAAUhE,sBAAsB,UAChCgE,EAAUhE,sBAAsB,WAGlC,IAAMkG,EAAyC,UAA3BC,cAAcC,SAC5BC,EAAoC,UAAtBpG,EAAM4F,YACpBS,EAAqC,WAAtBrG,EAAM4F,YAK3B,OACE,6BAASrC,UAAU,QACjB,4BAAQA,UAAU,gBAChB,4BACE,wBACEF,QAAS,kBAAMrD,EAAM6F,UAAU,UAC/BtC,UAAS,UAAK6C,EAAc,WAAa,KAF3C,gBAKA,wBACE/C,QAAS,kBAAMrD,EAAM6F,UAAU,WAC/BtC,UAAS,UAAK8C,EAAe,WAAa,KAF5C,iBAQHD,GACC,6BAAS7C,UAAU,kBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAAf,KACA,yBAAKA,UAAU,OAAf,aACA,yBAAKA,UAAU,OAAf,gBACA,yBAAKA,UAAU,OAAf,eACA,yBAAKA,UAAU,MAAME,MAAO,CAAE6C,SAAU,aAAxC,cACc,IACZ,kBAAC,EAAD,CAAgB1C,UAAWG,EAAUhF,KAAKC,wBAE5C,yBAAKuE,UAAU,iBAAf,sBACA,yBAAKA,UAAU,OAAf,WAGF,yBAAKA,UAAU,kBACb,2BAAOyB,QAAQ,gBAAgBzB,UAAU,wBAAzC,4BAGA,2BACE1C,GAAG,gBACH0C,UAAU,uBACVC,KAAK,SACLS,KAAK,mBACLsC,IAAI,MACJC,aAAczC,EAAUtE,wBACxBwF,SA9Ca,SAAAL,GACvBb,EAAUhD,iBAAiB0F,SAAS7B,EAAMC,OAAOxC,SA8CvCgD,YAAY,2BAZhB,qBAcqB,IAClBtB,EAAUvE,iBACPuE,EAAUvE,iBACVuE,EAAUtE,wBAjBhB,MAqB8B,IAA7BsE,EAAUhF,KAAKK,KAAKsH,MACnB,yBACEjD,MAAO,CACL6C,SAAU,WACVK,IAAK,OACLC,KAAM,MACNC,UAAW,wBACXC,UAAW,WANf,gBAQe,6BARf,2DAaD7G,MAAMC,KAAK6D,EAAUhF,KAAKK,KAAKe,WAC7Bc,MAAK,cAA2B,IAAvBC,EAAsB,oBAAXC,EAAW,oBAC9B,OAAOC,IACL,IAAIC,KAAKH,EAAMI,cACf,IAAID,KAAKF,EAAMG,kBAGlB6D,KAAI,WAAc4B,GAAW,IAAD,mBAAtBlG,EAAsB,KAAlBwB,EAAkB,KAC3B,OACE,yBACE+C,IAAKvE,EACL0C,UAAU,MACVE,MAAO,CAAEuD,QAAS3E,EAAMhC,WAAa,OAAS,SAC9C,yBAAKkD,UAAU,OAAOwD,GACtB,yBAAKxD,UAAU,OAAOlB,EAAM4B,MAC5B,yBAAKV,UAAU,OAAOlB,EAAM/B,aAC5B,yBAAKiD,UAAU,OAAf,IAAuBlB,EAAM5B,OAC7B,yBAAK8C,UAAU,OAAf,UAEIlB,EAAM5B,MAAQsD,EAAUhF,KAAKI,SAAS8H,MAAMC,KAAKC,QACjD,IAGJ,yBAAK5D,UAAU,OAAOlB,EAAMf,cAC5B,yBAAKiC,UAAU,OACb,kBAAC,EAAD,CACED,MAAM,gBACNF,SAAO,EACPC,QAAS,kBAAMU,EAAUnD,aAAaC,IACtC0C,UAAU,6BASzB8C,GACC,6BAAS9C,UAAU,iBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAAf,KACA,yBAAKA,UAAU,OAAf,cACA,yBAAKA,UAAU,OAAf,QAGDW,OAAO/D,QAAQxB,GAAQwG,KAAI,WAAe4B,GAAW,IAAD,mBAAvB3B,EAAuB,UACnD,OACE,yBAAKA,IAAKA,EAAK7B,UAAU,OACvB,yBAAKA,UAAU,OAAOwD,GACtB,yBAAKxD,UAAU,OAAO6B,GACtB,yBAAK7B,UAAU,OAAf,IAAuBQ,EAAUhF,KAAKO,QAAQ8F,SAOxD,kBAAC,EAAD,CACEf,SAAUrE,EAAM2F,gBAAkBM,EAClCR,QAAS,kBAAMzF,EAAM+F,eAEvB,kBAAC,EAAD,CACE1B,QAASrE,EAAM2F,eACfrB,kBAAmBtE,EAAMgG,aAG3B,kBAAC,EAAD,WC/ESoB,G,MApGEtD,aAAS,WACxB,IAAMC,EAAYzB,IAEZtC,EAAQmC,aAAc,iBAAO,CACjCwD,gBAAgB,EAChBC,YAAa,QACbC,UAHiC,SAGvBC,GACR9F,EAAM4F,YAAcE,OAIxB/C,qBAAU,WACRgB,EAAUrD,0BAA0B,UACpCqD,EAAUrD,0BAA0B,WAGtC,IAAM0F,EAAoC,UAAtBpG,EAAM4F,YACpBS,EAAqC,WAAtBrG,EAAM4F,YAE3B,OACE,6BAASrC,UAAU,QACjB,4BAAQA,UAAU,gBAChB,4BACE,wBACEF,QAAS,kBAAMrD,EAAM6F,UAAU,UAC/BtC,UAAS,UAAK6C,EAAc,WAAa,KAF3C,gBAKA,wBACE/C,QAAS,kBAAMrD,EAAM6F,UAAU,WAC/BtC,UAAS,UAAK8C,EAAe,WAAa,KAF5C,iBAQHD,GACC,6BAAS7C,UAAU,kBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAAf,KACA,yBAAKA,UAAU,OAAf,aACA,yBAAKA,UAAU,OAAf,gBACA,yBAAKA,UAAU,OAAf,eACA,yBAAKA,UAAU,iBAAf,uBAGkC,IAAnCQ,EAAUpD,cAAc0G,QACvB,yBACE5D,MAAO,CACL6C,SAAU,WACVK,IAAK,OACLC,KAAM,MACNC,UAAW,wBACXC,UAAW,WANf,gBAQe,6BARf,qDAaD/C,EAAUpD,cAAcwE,KAAI,WAAc4B,GAAW,IAAD,mBAAtBlG,EAAsB,KAAlBwB,EAAkB,KACnD,OACE,yBACE+C,IAAKvE,EACL0C,UAAU,MACVE,MAAO,CAAEuD,QAAS3E,EAAMhC,WAAa,OAAS,SAC9C,yBAAKkD,UAAU,OAAOwD,GACtB,yBAAKxD,UAAU,OAAOlB,EAAM4B,MAC5B,yBAAKV,UAAU,OAAOlB,EAAM/B,aAC5B,yBAAKiD,UAAU,OAAf,IAAuBlB,EAAM5B,OAC7B,yBAAK8C,UAAU,OAAOlB,EAAMf,mBAOrC+E,GACC,6BAAS9C,UAAU,iBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAAf,KACA,yBAAKA,UAAU,OAAf,cACA,yBAAKA,UAAU,OAAf,QAGDW,OAAO/D,QAAQxB,GAAQwG,KAAI,WAAQ4B,GAAW,IAAjB3B,EAAgB,oBAC5C,OACE,yBAAKA,IAAKA,EAAK7B,UAAU,OACvB,yBAAKA,UAAU,OAAOwD,GACtB,yBAAKxD,UAAU,OAAO6B,GACtB,yBAAK7B,UAAU,OAAf,IAAuBQ,EAAUhF,KAAKQ,YAAY6F,cCpEnDkC,G,MAxBC,WACd,OACE,2BAAO/D,UAAU,WACf,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASgE,GAAG,QAAQhE,UAAU,WAAWiE,gBAAgB,UAAzD,SAIF,4BACE,kBAAC,IAAD,CACED,GAAG,YACHhE,UAAU,WACViE,gBAAgB,UAHlB,kB,MC8BGC,MA7Bf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAS,+BACf,yBAAKnE,UAAU,OACb,kBAAC,EAAD,MAEA,0BAAMA,UAAU,WACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUL,GAAG,WAEf,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,IAAD,CAAUL,GAAG,iBCxBTM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhH,MAAK,SAAAiH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e49bbac.chunk.js","sourcesContent":["export const STORES = {\n  amazon: 0,\n  ebay: 1,\n}\n\nexport const CURRENCY_API_URL =\n  'https://api.exchangeratesapi.io/latest?base=USD&symbols=ILS,USD'\n","import { v4 as uuid } from 'uuid'\nimport * as dateUtils from 'date-fns'\n\nimport { CURRENCY_API_URL } from '../constants'\n\nfunction createStore() {\n  return {\n    data: {\n      fetchCurrencyLoading: false,\n      fetchCurrencyError: false,\n      fetchCurrencyErrorMessage: 'Server response error',\n      currency: null,\n      list: new Map(),\n      listSum: {\n        amazon: 0,\n        ebay: 0,\n      },\n      receivedSum: {\n        amazon: 0,\n        ebay: 0,\n      },\n    },\n    currencyInterval: null,\n    defaultCurrencyInterval: 10000,\n    saveItem(item) {\n      this.data.list.set(uuid(), item)\n    },\n\n    calcAggregatedListSum(store) {\n      this.data.listSum[store] = Array.from(this.data.list.entries())\n        .filter(([, item]) => {\n          return !item.isReceived\n        })\n        .filter(([, item]) => item.onlineStore === store)\n        .reduce((accumulator, [, value]) => {\n          return accumulator + value.price\n        }, 0)\n    },\n    calcAggregatedReceivedSum(store) {\n      this.data.receivedSum[store] = this.receivedItems\n        .filter(([, item]) => item.onlineStore === store)\n        .reduce((accumulator, [, value]) => {\n          return accumulator + value.price\n        }, 0)\n    },\n    markReceived(id) {\n      this.data.list.get(id).isReceived = true\n    },\n    onIntervalChange(interval) {\n      this.currencyInterval = interval\n    },\n    get receivedItems() {\n      return Array.from(this.data.list.entries())\n        .sort(([, itemA], [, itemB]) => {\n          return dateUtils.compareAsc(\n            new Date(itemA.deliveryDate),\n            new Date(itemB.deliveryDate)\n          )\n        })\n        .filter(([, item]) => {\n          return item.isReceived\n        })\n    },\n    async fetchCurrency() {\n      this.data.fetchCurrencyLoading = true\n      this.data.currency = await fetch(CURRENCY_API_URL).then(res => {\n        if (res.status >= 400) {\n          this.data.fetchCurrencyError = true\n          this.data.fetchCurrencyLoading = false\n          this.fetchCurrencyErrorMessage =\n            res.status + ' ' + res.statusText || 'Server response error'\n          throw new Error('Server response error.')\n        }\n        return res.json()\n      })\n      this.data.fetchCurrencyLoading = false\n    },\n  }\n}\n\nexport { createStore }\n","import React, { createContext } from 'react'\nimport { useLocalStore } from 'mobx-react-lite'\n\nimport { createStore } from '../store/createStore'\n\nconst StoreContext = createContext()\n\nconst StoreProvider = ({ children }) => {\n  const store = useLocalStore(createStore)\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n}\n\nexport { StoreContext, StoreProvider }\n","import { useContext } from 'react'\n\nimport { StoreContext } from '../context/StoreContext'\n\nconst useStore = () => {\n  const store = useContext(StoreContext)\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider.')\n  }\n  return store\n}\n\nexport default useStore\n","import { useEffect, useRef } from 'react'\n\nfunction useInterval(\n  callback,\n  delay,\n  runOnLoad = false,\n  effectDependencies = []\n) {\n  const savedCallback = useRef()\n\n  useEffect(() => {\n    if (runOnLoad) {\n      callback()\n    }\n  }, [...effectDependencies]) // eslint-disable-line\n\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    if (delay !== null) {\n      const id = setInterval(() => savedCallback.current(), delay)\n      return () => clearInterval(id)\n    }\n  }, [delay, ...effectDependencies]) // eslint-disable-line\n}\n\nexport default useInterval\n","import React from 'react'\n\nimport './Button.scss'\n\nconst Button = ({ primary, onClick, title, className, type = 'button' }) => {\n  return (\n    <button\n      type={type}\n      className={`Button ${className}`}\n      onClick={onClick}\n      style={{ background: !primary && '#ccc' }}>\n      {title}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react'\n\nimport './LoadingSpinner.scss'\n\nconst LoadingSpinner = ({ isLoading }) => {\n  return isLoading ? (\n    <div className=\"LoadingSpinner\">\n      <div></div>\n      <div></div>\n    </div>\n  ) : null\n}\n\nexport default LoadingSpinner\n","import React from 'react'\nimport { observer } from 'mobx-react-lite'\n\nimport { useStore } from '../../hooks'\n\nimport './FetchCurrencyError.scss'\n\nconst FetchCurrencyError = observer(() => {\n  const rootStore = useStore()\n  return rootStore.data.fetchCurrencyError ? (\n    <div className=\"FetchCurrencyError\">\n      {rootStore.data.fetchCurrencyErrorMessage}\n    </div>\n  ) : null\n})\n\nexport default FetchCurrencyError\n","import React, { createRef } from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\n\nimport { STORES } from '../../constants'\nimport { useStore } from '../../hooks'\nimport Button from '../../components/Button'\n\nimport './AddItemModal.scss'\n\nconst defaultItem = {\n  name: '',\n  onlineStore: Object.keys(STORES)[0],\n  price: 0,\n  deliveryDate: '',\n  isReceived: false,\n}\n\nconst AddItemModal = observer(({ visible, closeModalHandler }) => {\n  const formRef = createRef()\n\n  const rootStore = useStore()\n\n  const store = useLocalStore(() => ({\n    newItem: {\n      ...defaultItem,\n    },\n    isFormValid: false,\n  }))\n\n  const onValueChange = event => {\n    store.newItem[event.target.name] =\n      event.target.name === 'price'\n        ? parseFloat(event.target.value)\n        : event.target.value\n  }\n\n  const onOnlineStoreChange = event => {\n    store.newItem.onlineStore = event.target.value\n  }\n\n  return visible ? (\n    <>\n      <div className=\"AddItemModal-Backdrop\" onClick={closeModalHandler}></div>\n      <div className=\"AddItemModal\">\n        <div className=\"AddItemModal__Title\">Add Item</div>\n        <div className=\"AddItemModal__Description\">\n          Fill out the form to add item to list.\n        </div>\n        <form ref={formRef} className=\"AddItemModal__FormWrap\">\n          <div className=\"AddItemModal__FormWrap__FormItem\">\n            <label\n              className=\"AddItemModal__FormWrap__FormItem-label\"\n              htmlFor=\"itemName\">\n              Item Name\n            </label>\n            <input\n              id=\"itemName\"\n              type=\"text\"\n              name=\"name\"\n              value={store.newItem.name}\n              onChange={onValueChange}\n              className=\"AddItemModal__FormWrap__FormItem-input\"\n              required\n            />\n          </div>\n          <div className=\"AddItemModal__FormWrap__FormItem\">\n            <label\n              className=\"AddItemModal__FormWrap__FormItem-label\"\n              htmlFor=\"onlineStore\">\n              Select a Store\n            </label>\n            <select\n              id=\"onlineStore\"\n              name=\"onlineStore\"\n              value={store.newItem.onlineStore}\n              className=\"AddItemModal__FormWrap__FormItem-select\"\n              onChange={onOnlineStoreChange}>\n              {Object.entries(STORES).map(([key, value]) => {\n                return (\n                  <option key={`${key}-${value}`} value={key}>\n                    {key}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n          <div className=\"AddItemModal__FormWrap__FormItem\">\n            <label\n              className=\"AddItemModal__FormWrap__FormItem-label\"\n              htmlFor=\"price\">\n              Price (USD)\n            </label>\n            <input\n              id=\"price\"\n              type=\"number\"\n              name=\"price\"\n              value={store.newItem.price}\n              onChange={onValueChange}\n              placeholder=\"Price (USD)\"\n              className=\"AddItemModal__FormWrap__FormItem-input\"\n              required\n            />\n          </div>\n          <div className=\"AddItemModal__FormWrap__FormItem\">\n            <label\n              className=\"AddItemModal__FormWrap__FormItem-label\"\n              htmlFor=\"deliveryDate\">\n              Est. Delivery Date\n            </label>\n            <input\n              id=\"deliveryDate\"\n              type=\"date\"\n              name=\"deliveryDate\"\n              value={store.newItem.deliveryDate}\n              onChange={onValueChange}\n              placeholder=\"EST. Delivery Date\"\n              className=\"AddItemModal__FormWrap__FormItem-input\"\n              required\n            />\n          </div>\n        </form>\n        <div className=\"AddItemModal__ActionsWrap\">\n          <Button\n            primary\n            title=\"Save\"\n            className=\"AddItemModal__ActionsWrap__SaveButton\"\n            onClick={() => {\n              if (!formRef.current.checkValidity()) {\n                formRef.current.reportValidity()\n                return\n              }\n              rootStore.saveItem(store.newItem)\n              store.newItem = { ...defaultItem }\n              closeModalHandler()\n            }}\n          />\n          <Button\n            title=\"Cancel\"\n            onClick={() => {\n              closeModalHandler()\n            }}\n          />\n        </div>\n      </div>\n    </>\n  ) : null\n})\n\nconst AddItemModalButton = ({ onclick, visible }) => {\n  return visible ? (\n    <Button\n      primary\n      title=\"Add Item\"\n      className=\"AddItemModalButton\"\n      onClick={onclick}\n    />\n  ) : null\n}\n\nexport { AddItemModal, AddItemModalButton }\n","import React, { useEffect } from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport { useLocation } from 'react-router-dom'\nimport * as dateUtils from 'date-fns'\n\nimport { STORES } from '../../constants'\nimport { useStore, useInterval } from '../../hooks'\nimport Button from '../../components/Button'\nimport LoadingSpinner from '../../components/LoadingSpinner'\nimport FetchCurrencyError from '../../components/FetchCurrencyError'\nimport { AddItemModalButton, AddItemModal } from '../../components/AddItemModal'\n\nimport './List.scss'\n\nconst List = observer(() => {\n  const rootStore = useStore()\n\n  const store = useLocalStore(() => ({\n    isModalVisible: false,\n    selectedTab: 'items',\n    selectTab(tab) {\n      store.selectedTab = tab\n    },\n    openModal() {\n      store.isModalVisible = true\n    },\n    closeModal() {\n      store.isModalVisible = false\n    },\n  }))\n\n  useInterval(\n    () => {\n      rootStore.fetchCurrency()\n    },\n    rootStore.currencyInterval || rootStore.defaultCurrencyInterval,\n    true,\n    [rootStore.currencyInterval]\n  )\n\n  useEffect(() => {\n    rootStore.calcAggregatedListSum('amazon')\n    rootStore.calcAggregatedListSum('ebay')\n  })\n\n  const isListRoute = useLocation().pathname === '/list'\n  const isItemsList = store.selectedTab === 'items'\n  const isStoresList = store.selectedTab === 'stores'\n\n  const onIntervalChange = event => {\n    rootStore.onIntervalChange(parseInt(event.target.value))\n  }\n  return (\n    <section className=\"List\">\n      <header className=\"List__Header\">\n        <ul>\n          <li\n            onClick={() => store.selectTab('items')}\n            className={`${isItemsList ? 'selected' : ''}`}>\n            Bought items\n          </li>\n          <li\n            onClick={() => store.selectTab('stores')}\n            className={`${isStoresList ? 'selected' : ''}`}>\n            Stores list\n          </li>\n        </ul>\n      </header>\n\n      {isItemsList && (\n        <section className=\"BoughtItemList\">\n          <div className=\"HeaderRow\">\n            <div className=\"Col\">#</div>\n            <div className=\"Col\">Item Name</div>\n            <div className=\"Col\">Online Store</div>\n            <div className=\"Col\">Price (USD)</div>\n            <div className=\"Col\" style={{ position: 'relative' }}>\n              Price (ILS){' '}\n              <LoadingSpinner isLoading={rootStore.data.fetchCurrencyLoading} />\n            </div>\n            <div className=\"Col text-bold\">Est. Delivery Date</div>\n            <div className=\"Col\">Action</div>\n          </div>\n\n          <div className=\"List__Interval\">\n            <label htmlFor=\"intervalInput\" className=\"List__Interval-label\">\n              Interval in Milliseconds\n            </label>\n            <input\n              id=\"intervalInput\"\n              className=\"List__Interval-input\"\n              type=\"number\"\n              name=\"currencyInterval\"\n              min=\"100\"\n              defaultValue={rootStore.defaultCurrencyInterval}\n              onChange={onIntervalChange}\n              placeholder=\"Number of milliseconds\"\n            />\n            Interval Selected:{' '}\n            {rootStore.currencyInterval\n              ? rootStore.currencyInterval\n              : rootStore.defaultCurrencyInterval}\n            ms\n          </div>\n\n          {rootStore.data.list.size === 0 && (\n            <div\n              style={{\n                position: 'absolute',\n                top: ' 50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                textAlign: 'center',\n              }}>\n              No items : ( <br /> Please add items to the cart via the add\n              button below.\n            </div>\n          )}\n\n          {Array.from(rootStore.data.list.entries())\n            .sort(([, itemA], [, itemB]) => {\n              return dateUtils.compareAsc(\n                new Date(itemA.deliveryDate),\n                new Date(itemB.deliveryDate)\n              )\n            })\n            .map(([id, value], index) => {\n              return (\n                <div\n                  key={id}\n                  className=\"Row\"\n                  style={{ display: value.isReceived ? 'none' : 'flex' }}>\n                  <div className=\"Col\">{index}</div>\n                  <div className=\"Col\">{value.name}</div>\n                  <div className=\"Col\">{value.onlineStore}</div>\n                  <div className=\"Col\">${value.price}</div>\n                  <div className=\"Col\">\n                    ₪\n                    {(value.price * rootStore.data.currency.rates.ILS).toFixed(\n                      2\n                    )}\n                  </div>\n                  <div className=\"Col\">{value.deliveryDate}</div>\n                  <div className=\"Col\">\n                    <Button\n                      title=\"Mark Received\"\n                      primary\n                      onClick={() => rootStore.markReceived(id)}\n                      className=\"MarkReceivedButton\"\n                    />\n                  </div>\n                </div>\n              )\n            })}\n        </section>\n      )}\n\n      {isStoresList && (\n        <section className=\"ReceivedItems\">\n          <div className=\"HeaderRow\">\n            <div className=\"Col\">#</div>\n            <div className=\"Col\">Store Name</div>\n            <div className=\"Col\">Sum</div>\n          </div>\n\n          {Object.entries(STORES).map(([key, value], index) => {\n            return (\n              <div key={key} className=\"Row\">\n                <div className=\"Col\">{index}</div>\n                <div className=\"Col\">{key}</div>\n                <div className=\"Col\">${rootStore.data.listSum[key]}</div>\n              </div>\n            )\n          })}\n        </section>\n      )}\n\n      <AddItemModalButton\n        visible={!store.isModalVisible && isListRoute}\n        onclick={() => store.openModal()}\n      />\n      <AddItemModal\n        visible={store.isModalVisible}\n        closeModalHandler={store.closeModal}\n      />\n\n      <FetchCurrencyError />\n    </section>\n  )\n})\n\nexport default List\n","import React, { useEffect } from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport { STORES } from '../../constants'\nimport { useStore } from '../../hooks'\n\nimport './Received.scss'\n\nconst Received = observer(() => {\n  const rootStore = useStore()\n\n  const store = useLocalStore(() => ({\n    isModalVisible: false,\n    selectedTab: 'items',\n    selectTab(tab) {\n      store.selectedTab = tab\n    },\n  }))\n\n  useEffect(() => {\n    rootStore.calcAggregatedReceivedSum('amazon')\n    rootStore.calcAggregatedReceivedSum('ebay')\n  })\n\n  const isItemsList = store.selectedTab === 'items'\n  const isStoresList = store.selectedTab === 'stores'\n\n  return (\n    <section className=\"List\">\n      <header className=\"List__Header\">\n        <ul>\n          <li\n            onClick={() => store.selectTab('items')}\n            className={`${isItemsList ? 'selected' : ''}`}>\n            Bought items\n          </li>\n          <li\n            onClick={() => store.selectTab('stores')}\n            className={`${isStoresList ? 'selected' : ''}`}>\n            Stores list\n          </li>\n        </ul>\n      </header>\n\n      {isItemsList && (\n        <section className=\"BoughtItemList\">\n          <div className=\"HeaderRow\">\n            <div className=\"Col\">#</div>\n            <div className=\"Col\">Item Name</div>\n            <div className=\"Col\">Online Store</div>\n            <div className=\"Col\">Price (USD)</div>\n            <div className=\"Col text-bold\">Est. Delivery Date</div>\n          </div>\n\n          {rootStore.receivedItems.length === 0 && (\n            <div\n              style={{\n                position: 'absolute',\n                top: ' 50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                textAlign: 'center',\n              }}>\n              No items : ( <br /> Please mark items as received in the items\n              list.\n            </div>\n          )}\n\n          {rootStore.receivedItems.map(([id, value], index) => {\n            return (\n              <div\n                key={id}\n                className=\"Row\"\n                style={{ display: value.isReceived ? 'flex' : 'none' }}>\n                <div className=\"Col\">{index}</div>\n                <div className=\"Col\">{value.name}</div>\n                <div className=\"Col\">{value.onlineStore}</div>\n                <div className=\"Col\">${value.price}</div>\n                <div className=\"Col\">{value.deliveryDate}</div>\n              </div>\n            )\n          })}\n        </section>\n      )}\n\n      {isStoresList && (\n        <section className=\"ReceivedItems\">\n          <div className=\"HeaderRow\">\n            <div className=\"Col\">#</div>\n            <div className=\"Col\">Store Name</div>\n            <div className=\"Col\">Sum</div>\n          </div>\n\n          {Object.entries(STORES).map(([key], index) => {\n            return (\n              <div key={key} className=\"Row\">\n                <div className=\"Col\">{index}</div>\n                <div className=\"Col\">{key}</div>\n                <div className=\"Col\">${rootStore.data.receivedSum[key]}</div>\n              </div>\n            )\n          })}\n        </section>\n      )}\n    </section>\n  )\n})\n\nexport default Received\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport './Sidebar.scss'\n\nconst Sidebar = () => {\n  return (\n    <aside className=\"Sidebar\">\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/list\" className=\"App-link\" activeClassName=\"active\">\n              List\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/received\"\n              className=\"App-link\"\n              activeClassName=\"active\">\n              Received\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </aside>\n  )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { StoreProvider } from './context/StoreContext'\n\nimport List from './pages/List'\nimport Received from './pages/Received'\n\nimport Sidebar from './components/Sidebar'\n\nimport './App.scss'\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <Router basename=\"/yotam-elkaslasy-23-09-2020\">\n        <div className=\"App\">\n          <Sidebar />\n\n          <main className=\"Wrapper\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/list\" />\n              </Route>\n              <Route exact path=\"/list\">\n                <List />\n              </Route>\n              <Route exact path=\"/received\">\n                <Received />\n              </Route>\n              <Route path=\"*\">\n                <Redirect to=\"/list\" />\n              </Route>\n            </Switch>\n          </main>\n        </div>\n      </Router>\n    </StoreProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}